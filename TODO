- scale rectangles on screen by knowledge of frequency buckets and timestep duration
    - add axes!
        - add option for log scale of frequency, to get semitones equally spaced?

DONE - p to pause?

- add a ctor which turns "a", 4 (or a4) into 440, etc

NO - screenshot button?
    - use pause :-)

- show nearest semitone and delta
    - requires tuning information (source may be tuned up/down N cents)

- construct the FFT (and arrays) in a holding structure (not the main ear)
    reused from process-to-process for performance reasons
    can be passed into process, just be lexicals in Run?

- SDL display of semitone lines and current detections

- add absolute or relative 'loudness' to each frequency in analysis
    - make the sine test also test relative loudness of the muxxed sines

- maybe "the real notes"
    - might be timbre specific
    - voice?

- generate or record some test samples

- define "expectation" file format
    - (time, expected note/expected freq)
    - midi?
        - golang impls of midi to use?

- add freq-semitone converter
    - requires key

- make a key-aware note converter based on semitone converter 

Wed 29 Sep 08:05:06 BST 2021
----------------------------

DONE - run FFT in ear
    - freq range E2 (82Hz - C7 2093Hz)
        - 64-2048 in powers of 2
        - so want samples >= 4kHz
            - at 16Khz, that's 0.25s
            - at 44Khz, this 0.09s
            - require sample rate to be a multiple of this
            4K
    - output top N frequencies

DONE - have a rolling step on the FFT
    - don't read a full FFT worth in one go
    - read in steps
    - when we have a full window, run FFT
    - discard oldest step, add a new
    - loop

DONE - should Mux on its own do the divide, or should the caller Wrap with a Scale?
    - is there value in the Mux-without-scale or not?

- source wrappers
    DONE - mute (by constant)
    NO - envelope (mute by function)

Thu  7 Oct 08:43:42 BST 2021
----------------------------

DONE - freq as float?
    - yes, needed for sensible handling of cents
    - which are in turn needed for tests
        NO - maybe `type Freq float64` ?

DONE - add gain to cmdline

DONE - q or esc to quit

DONE - add method to find max cents difference between a given freq
    - cents are log differences, so ratios
        1 cent = 1200th root of 2

DONE - turn current main into a test
    - add some tests
    - mix a couple of sines together
    - can we find fundamental?
    - even if quieter?

DONE - add new main which reads from WAV or alsa
    - dump raw audio to see if it is correct

DONE - pass (normalised 0->1.0 - how do we normalise!?) power to observer
    - use in SDL observer to draw different colours representing intensity
        - use cool blue->red->orange colours for intensity, not just greyscale

